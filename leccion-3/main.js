// URL base de la API de Rick and Morty (characters/personajes)
const BASE_URL = "https://rickandmortyapi.com/api/character";

// Botones para la manera de petici√≥n de la API
const fetchBtn = document.getElementById("fetch-btn");
const axiosBtn = document.getElementById("axios-btn");

// Contralar la paginaci√≥n segun el m√©todo elegido
let currentMethod = "fetch"

fetchBtn.addEventListener("click", () => {
    currentMethod = "fetch";
    currentPage = 1;
    getCharactersFetch(currentPage);
});

axiosBtn.addEventListener("click", () => {
    currentMethod = "axios";
    currentPage = 1;
    getCharactersAxios(currentPage);
});

// MANIPULAR EL DOM
// Seleccionar los elemnetos del dom
// Referencias a los elementos del DOM: el contenedor de los personajes
// y los botones de la paginaci√≥n
const container = document.getElementById("characters-container");
const prevButton = document.getElementById("prev");
const nextButton = document.getElementById("next");

// Variables para llevar el control de la paginaci√≥n
let currentPage = 1; // p√°gina actual
let totalPages = 1; // total de p√°ginas

// Funci√≥n asincrona que haga una petici√≥n a la
// API de Rick and Morty y me devuelva los personajes
// usando fetch y async/await

async function getCharactersFetch(page = 1) {
    try {
        // Solicitar los datos de la API usando el n√∫mero de la p√°gina
        const response = await fetch(`${BASE_URL}?page=${page}`);
        // Lanzar un error si la respuesta no fue satisfactoria
        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
        }
        // Extraer los datos de la respuesta y almacenarlos en una variable (data)
        // Parsear o convertir la respuesta JSON a un objeto JavaScript
        const data = await response.json();

        // Actualizar el total de p√°ginas disponibles (lo proporciona la API)
        totalPages = data.info.pages; // Total de p√°ginas disponibles

        // Renderizar los personajes en el contenedor
        renderCharacters(data.results);

        /// Actualizar los botones de la paginaci√≥n
        updateButtons();
    } catch (error) {
        // En caso de error, se muesta un mensaje en el contenedor de los personajes
        container.innerHTML = ` <p> ‚ùå Error al obtener los personajes: ${error.message}</p>`;
    }
}

// Funci√≥n asincrona que haga una petici√≥n a la
// API de Rick and Morty y me devuelva los personajes
// usando Axios
async function getCharactersAxios(page = 1) {
    try {
        // Solicitar los datos de la API usando el n√∫mero de la p√°gina
        const response = await axios.get(`${BASE_URL}?page=${page}`);

        // Extraer los datos de la respuesta y almacenarlos en una variable (data)
        const data = response.data;

        // Actualizar el total de p√°ginas disponibles (lo proporciona la API)
        totalPages = data.info.pages; // Total de p√°ginas disponibles

        // Renderizar los personajes en el contenedor
        renderCharacters(data.results);

        /// Actualizar los botones de la paginaci√≥n
        updateButtons();
    } catch (error) {
        // En caso de error, se muesta un mensaje en el contenedor de los personajes
        container.innerHTML = ` <p> ‚ùå Error al obtener los personajes con Axios: ${error.message}</p>`;
    }
}

// Crear una funci√≥n para renderizar un array de tareas en el contenedor HTML
// Crea tarjetas visuales para cada personaje con su infomarci√≥n en el contenedor
function renderCharacters(characters) {
    // Limpiar el contenedor antes de insertar los nuevos personajes
    container.innerHTML = ""; // limpiamos el contenedor
    // Iterar sobre cada personaje  en el array de personajes
    characters.forEach((param) => {
        // crear un div con una clase llamada "card" para reprensentar cada personaje
        const card = document.createElement("div");
        card.className = "card"; // a√±adir la calse "card" al div
        // Define el contenido HTML de la tarjeta con los datos del personaje
        card.innerHTML = `  
            <img class="character-image" src="${param.image}" alt="${param.name}" />
            <h2>${param.name}</h2>
            <p style="font-size: 1.2rem;"> üëΩ Especie: ${param.species}</p>
            <p style="font-size: 1.2rem;"> ‚ù§Ô∏è Estado: ${param.status}</p>
            <p style="font-size: 1.2rem;"> üöª G√©nero: ${param.gender}</p>
            <p style="font-size: 1.2rem;"> üåç Origen: ${param.origin.name}</p>
            <p style="font-size: 1.2rem;"> üìç Ubicaci√≥n: ${param.location.name}</p>
            <p style="font-size: 1.2rem;"> üé¨ Episodios: ${param.episode.length}</p>
        `;
        // Agregamos la tarjeta al contenedor de los personajes
        container.appendChild(card); // A√±adir la tarjeta al contenedor de personajes
    });
}

// Funci√≥n que habilita o deshabilita los botones de paginaci√≥n
// seg√∫n la p√°gina actual
function updateButtons() {
    prevButton.disabled = currentPage === 1; // Deshabilitar el bot√≥n "anterior" si estamos en la primera p√°gina
    nextButton.disabled = currentPage === totalPages; // Deshabilitar el bot√≥n "siguiente" si estamos en la √∫ltima p√°gina
}

// Evento click para el bot√≥n "anterior"
prevButton.addEventListener("click", () => {
    if (currentPage > 1) {
        currentPage--; // Disminuir la p√°gina actual
        currentMethod === "axios" ? getCharactersAxios(currentPage) : getCharactersFetch(currentPage); // Obtener los personajes de la nueva p√°gina dependiendo del m√©todo utilizado
    }
});

// Evento click para el bot√≥n "siguiente"
nextButton.addEventListener("click", () => {
    if (currentPage < totalPages) {
        currentPage++; // Incrementar la p√°gina actual
        currentMethod === "axios" ? getCharactersAxios(currentPage) : getCharactersFetch(currentPage); // Obtener los personajes de la nueva p√°gina dependiendo del m√©todo utilizado
    }
});

// // Llamada inicial para mostrar la primera p√°gina de personajes al cargar la app(m√©todo f)
// getCharactersFetch();
